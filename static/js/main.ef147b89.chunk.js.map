{"version":3,"sources":["components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","width","src","movie","poster","alt","title","plot","App","state","movies","handleInputChange","event","console","log","target","name","setState","value","handleAddMovie","preventDefault","JSON","parse","stringify","push","htmlFor","type","this","onChange","onClick","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iLAeeA,EAZF,SAAAC,GACX,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,UACpC,yBAAKC,IAAKJ,EAAMK,MAAMC,OAAQL,UAAU,eAAeM,IAAKP,EAAMK,MAAMG,QACtE,yBAAKP,UAAU,aACf,wBAAIA,UAAU,cAAcD,EAAMK,MAAMG,OACtC,uBAAGP,UAAU,aAAaD,EAAMK,MAAMI,SCyJjCC,E,4MAhHbC,MAAQ,CACNH,MAAO,GACPC,KAAM,GACNH,OAAQ,GACRM,OAAQ,I,EAGVC,kBAAoB,SAAAC,GAClBC,QAAQC,IAAIF,EAAMG,OAAOC,MACzB,EAAKC,SAAL,eAAiBL,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOG,S,EAGpDC,eAAiB,SAAAP,GACfA,EAAMQ,iBACN,IAAIV,EAASW,KAAKC,MAAMD,KAAKE,UAAU,EAAKd,MAAMC,SAClDA,EAAOc,KAAK,CACVlB,MAAO,EAAKG,MAAMH,MAClBC,KAAM,EAAKE,MAAMF,KACjBH,OAAQ,EAAKK,MAAML,SAErB,EAAKa,SAAS,CAAEP,Y,uDAMhB,OACE,oCAEE,8BACE,2BAAOe,QAAQ,SAAf,eACA,2BACEC,KAAK,OACLV,KAAK,QACLE,MAAOS,KAAKlB,MAAMH,MAClBsB,SAAUD,KAAKhB,oBAEjB,2BAAOc,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLV,KAAK,OACLE,MAAOS,KAAKlB,MAAMF,KAClBqB,SAAUD,KAAKhB,oBAEjB,2BAAOc,QAAQ,UAAf,UACA,2BACEC,KAAK,OACLV,KAAK,SACLE,MAAOS,KAAKlB,MAAML,OAClBwB,SAAUD,KAAKhB,oBAGjB,4BAAQkB,QAASF,KAAKR,gBAAtB,WAGAQ,KAAKlB,MAAMC,OAAOoB,KAAI,SAAA3B,GAAK,OAAI,kBAAC,EAAD,CAAMA,MAAOA,Y,GAzDpC4B,aCpCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.ef147b89.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Card = props => {\n  return (\n    <div className=\"card\" style={{ width: '18rem' }}>\n      <img src={props.movie.poster} className=\"card-img-top\" alt={props.movie.title}/>\n        <div className=\"card-body\">\n        <h5 className=\"card-title\">{props.movie.title}</h5>\n          <p className=\"card-text\">{props.movie.plot}</p>\n        </div>\n</div>\n  )\n}\n\nexport default Card","import React, { Component } from 'react'\nimport Card from './components/Card'\n// import Song from './components/Song'\n\n// let movies = [\n//   {\n//     title: 'Goodfellas',\n//     plot: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit culpa consectetur asperiores corrupti et optio. Suscipit harum rem quidem ratione architecto? Illum qui enim ab aliquam laboriosam voluptatum debitis facere.',\n//     poster: 'https://images-na.ssl-images-amazon.com/images/I/51rOnIjLqzL._AC_SY450_.jpg'\n//   },\n//   {\n//     title: 'The Room',\n//     plot: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit culpa consectetur asperiores corrupti et optio. Suscipit harum rem quidem ratione architecto? Illum qui enim ab aliquam laboriosam voluptatum debitis facere.',\n//     poster: 'https://fleurcinema.com/filesystem/fleur-cinema/Movies/2019/october/theroom.png'\n//   }\n// ]\n\n// let songs = [\n//   {\n//     name: 'Awake',\n//     artist: 'The Unsung',\n//     albumCover: 'https://distrokid.imgix.net/http%3A%2F%2Fgather.fandalism.com%2F619765--8778177E-5FEA-4215-A0F08F3E305B87AB--1583434939528--Bandhive.jpg?fm=jpg&q=75&w=800&s=81f5ef0eb08a5deb671fd779d11c006f'\n//   },\n//   {\n//     name: 'All Star',\n//     artist: 'Smash Mouth',\n//     albumCover: 'https://i.ytimg.com/vi/L_jWHffIx5E/maxresdefault.jpg'\n//   },\n//   {\n//     name: 'Hotel California',\n//     artist: 'The Eagle',\n//     albumCover: 'https://media.musicarts.com/is/image/MMGS7/J22229000000000-00-600x600.jpg'\n//   },\n//   {\n//     name: 'Old Town Road',\n//     artist: 'Lil Nas',\n//     albumCover: 'https://s3.amazonaws.com/media.thecrimson.com/photos/2019/04/14/200610_1337381.jpeg'\n//   },\n//   {\n//     name: 'Bad Guy',\n//     artist: 'The Unsung',\n//     albumCover: 'https://upload.wikimedia.org/wikipedia/en/a/a7/Myboysinglecover.jpg'\n//   },\n// ]\n\n// ==========================================\n\n\nclass App extends Component {\n\n  state = {\n    title: '',\n    plot: '',\n    poster: '',\n    movies: []\n  }\n\n  handleInputChange = event => {\n    console.log(event.target.name)\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleAddMovie = event => {\n    event.preventDefault()\n    let movies = JSON.parse(JSON.stringify(this.state.movies))\n    movies.push({\n      title: this.state.title,\n      plot: this.state.plot,\n      poster: this.state.poster\n    })\n    this.setState({ movies })\n    \n  }\n\n\n  render() {\n    return (\n      <>\n\n        <form>\n          <label htmlFor=\"title\">Movie Title</label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={this.state.title}\n            onChange={this.handleInputChange} />\n\n          <label htmlFor=\"plot\">Plot</label>\n          <input\n            type=\"text\"\n            name=\"plot\"\n            value={this.state.plot}\n            onChange={this.handleInputChange} />\n\n          <label htmlFor=\"poster\">Poster</label>\n          <input\n            type=\"text\"\n            name=\"poster\"\n            value={this.state.poster}\n            onChange={this.handleInputChange} />\n\n\n          <button onClick={this.handleAddMovie}>Submit</button>\n\n        </form>\n        { this.state.movies.map(movie => <Card movie={movie}/>)}\n\n\n\n        {/* <ul>\n          {\n            this.state.items.map(item => <li>{item}</li>)\n          }\n        </ul> */}\n      </>\n    )\n  }\n}\n\n\n\n\n\n\n\n\n\n// ==========================================\n\n\n\n\n\n  \n  \n// function App() {\n//   return (\n//     <>\n   {/* { songs.map(song => <Song song={song} />) } */}\n  \n\n   {/* { movies.map(movie => <Card movie={movie} />) } */}\n\n\n\n\n\n\n\n   {/* pass props */}\n    {/* <Card \n      movie={movies[0]}\n    />\n    <Card \n      movie={movies[1]} */}\n    {/* /> */}\n\n\n//    </>\n//   )\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}